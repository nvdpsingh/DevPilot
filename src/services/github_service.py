"""
GitHub Integration Service - Handles repository creation and GitHub Pages deployment.
"""
import os
import subprocess
import json
import time
from pathlib import Path
from typing import Dict, List, Any, Optional
import httpx
from github import Github

class GitHubService:
    """Service for GitHub repository creation and GitHub Pages deployment."""
    
    def __init__(self):
        self.github_token = os.getenv("GITHUB_TOKEN", "")
        self.github_client = Github(self.github_token) if self.github_token else None
        self.username = self._get_username()
    
    def _get_username(self) -> str:
        """Get GitHub username from token."""
        if not self.github_client:
            return "user"
        
        try:
            user = self.github_client.get_user()
            return user.login
        except:
            return "user"
    
    async def create_repository(self, project_name: str, description: str, is_public: bool = True) -> Dict[str, Any]:
        """Create a new GitHub repository."""
        
        if not self.github_client:
            return {
                "status": "error",
                "message": "GitHub token not configured"
            }
        
        try:
            # Create repository
            repo = self.github_client.get_user().create_repo(
                name=project_name,
                description=description,
                private=not is_public,
                auto_init=True,
                gitignore_template="Node"  # Default to Node.js gitignore
            )
            
            return {
                "status": "success",
                "repository_url": repo.html_url,
                "clone_url": repo.clone_url,
                "ssh_url": repo.ssh_url,
                "name": repo.name,
                "full_name": repo.full_name
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"Failed to create repository: {str(e)}"
            }
    
    async def push_to_github(self, project_path: Path, repo_url: str, project_name: str) -> Dict[str, Any]:
        """Push project files to GitHub repository."""
        
        try:
            # Initialize git repository
            subprocess.run(["git", "init"], cwd=project_path, check=True)
            
            # Add remote origin
            subprocess.run(["git", "remote", "add", "origin", repo_url], cwd=project_path, check=True)
            
            # Add all files
            subprocess.run(["git", "add", "."], cwd=project_path, check=True)
            
            # Commit files
            subprocess.run([
                "git", "commit", "-m", 
                f"Initial commit: {project_name}\n\nGenerated by AI Development Studio"
            ], cwd=project_path, check=True)
            
            # Push to main branch
            subprocess.run(["git", "push", "-u", "origin", "main"], cwd=project_path, check=True)
            
            return {
                "status": "success",
                "message": "Successfully pushed to GitHub",
                "repository_url": repo_url
            }
            
        except subprocess.CalledProcessError as e:
            return {
                "status": "error",
                "message": f"Git operation failed: {str(e)}"
            }
        except Exception as e:
            return {
                "status": "error",
                "message": f"Failed to push to GitHub: {str(e)}"
            }
    
    async def setup_github_pages(self, repo_name: str) -> Dict[str, Any]:
        """Set up GitHub Pages for the repository."""
        
        if not self.github_client:
            return {
                "status": "error",
                "message": "GitHub token not configured"
            }
        
        try:
            repo = self.github_client.get_repo(f"{self.username}/{repo_name}")
            
            # Enable GitHub Pages
            repo.create_pages_source(
                source={
                    "branch": "main",
                    "path": "/"
                }
            )
            
            # Get pages URL
            pages_url = f"https://{self.username}.github.io/{repo_name}"
            
            return {
                "status": "success",
                "pages_url": pages_url,
                "message": "GitHub Pages enabled successfully"
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"Failed to setup GitHub Pages: {str(e)}"
            }
    
    async def create_functional_app(self, project_name: str, project_type: str, tech_stack: str, command: str) -> Dict[str, Any]:
        """Create a fully functional application based on the project type."""
        
        project_path = Path("custom_projects") / project_name
        project_path.mkdir(parents=True, exist_ok=True)
        
        if project_type == "web-app" and "todo" in command.lower():
            return await self._create_todo_app(project_path, project_name, tech_stack)
        elif project_type == "web-app" and "blog" in command.lower():
            return await self._create_blog_app(project_path, project_name, tech_stack)
        elif project_type == "web-app" and "ecommerce" in command.lower():
            return await self._create_ecommerce_app(project_path, project_name, tech_stack)
        else:
            return await self._create_generic_app(project_path, project_name, tech_stack, command)
    
    async def _create_todo_app(self, project_path: Path, project_name: str, tech_stack: str) -> Dict[str, Any]:
        """Create a fully functional todo application."""
        
        # Create package.json
        package_json = {
            "name": project_name,
            "version": "1.0.0",
            "description": "AI-Generated Todo Application",
            "main": "index.js",
            "scripts": {
                "start": "node server.js",
                "dev": "nodemon server.js",
                "build": "webpack --mode production"
            },
            "dependencies": {
                "express": "^4.18.2",
                "cors": "^2.8.5",
                "body-parser": "^1.20.2",
                "uuid": "^9.0.0"
            },
            "devDependencies": {
                "nodemon": "^3.0.1",
                "webpack": "^5.88.0",
                "webpack-cli": "^5.1.0"
            }
        }
        
        (project_path / "package.json").write_text(json.dumps(package_json, indent=2))
        
        # Create server.js
        server_js = '''const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const { v4: uuidv4 } = require('uuid');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static('public'));

// In-memory storage (in production, use a database)
let todos = [
    { id: uuidv4(), text: 'Welcome to your AI-Generated Todo App!', completed: false, createdAt: new Date() },
    { id: uuidv4(), text: 'Add your first task', completed: false, createdAt: new Date() }
];

// API Routes
app.get('/api/todos', (req, res) => {
    res.json(todos);
});

app.post('/api/todos', (req, res) => {
    const { text } = req.body;
    if (!text) {
        return res.status(400).json({ error: 'Text is required' });
    }
    
    const newTodo = {
        id: uuidv4(),
        text: text.trim(),
        completed: false,
        createdAt: new Date()
    };
    
    todos.push(newTodo);
    res.status(201).json(newTodo);
});

app.put('/api/todos/:id', (req, res) => {
    const { id } = req.params;
    const { text, completed } = req.body;
    
    const todo = todos.find(t => t.id === id);
    if (!todo) {
        return res.status(404).json({ error: 'Todo not found' });
    }
    
    if (text !== undefined) todo.text = text.trim();
    if (completed !== undefined) todo.completed = completed;
    
    res.json(todo);
});

app.delete('/api/todos/:id', (req, res) => {
    const { id } = req.params;
    const todoIndex = todos.findIndex(t => t.id === id);
    
    if (todoIndex === -1) {
        return res.status(404).json({ error: 'Todo not found' });
    }
    
    todos.splice(todoIndex, 1);
    res.status(204).send();
});

// Serve the main page
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(PORT, () => {
    console.log(`🚀 Todo App running on http://localhost:${PORT}`);
});
'''
        
        (project_path / "server.js").write_text(server_js)
        
        # Create public directory
        public_dir = project_path / "public"
        public_dir.mkdir(exist_ok=True)
        
        # Create index.html
        index_html = f'''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_name} - AI Generated Todo App</title>
    <link rel="stylesheet" href="style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <header class="header">
            <h1><i class="fas fa-tasks"></i> {project_name}</h1>
            <p>AI-Generated Todo Application</p>
        </header>
        
        <div class="todo-container">
            <div class="add-todo">
                <input type="text" id="todoInput" placeholder="Add a new task..." maxlength="200">
                <button id="addBtn"><i class="fas fa-plus"></i></button>
            </div>
            
            <div class="filters">
                <button class="filter-btn active" data-filter="all">All</button>
                <button class="filter-btn" data-filter="active">Active</button>
                <button class="filter-btn" data-filter="completed">Completed</button>
            </div>
            
            <div class="todo-list" id="todoList">
                <!-- Todos will be loaded here -->
            </div>
            
            <div class="todo-stats">
                <span id="todoCount">0 tasks</span>
                <button id="clearCompleted" style="display: none;">Clear Completed</button>
            </div>
        </div>
    </div>
    
    <script src="script.js"></script>
</body>
</html>'''
        
        (public_dir / "index.html").write_text(index_html)
        
        # Create style.css
        style_css = '''* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    color: #333;
}

.container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
}

.header {
    text-align: center;
    margin-bottom: 30px;
    color: white;
}

.header h1 {
    font-size: 2.5rem;
    margin-bottom: 10px;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.header p {
    font-size: 1.1rem;
    opacity: 0.9;
}

.todo-container {
    background: white;
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
}

.add-todo {
    display: flex;
    gap: 10px;
    margin-bottom: 30px;
}

#todoInput {
    flex: 1;
    padding: 15px 20px;
    border: 2px solid #e1e5e9;
    border-radius: 50px;
    font-size: 16px;
    outline: none;
    transition: all 0.3s ease;
}

#todoInput:focus {
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

#addBtn {
    background: linear-gradient(45deg, #667eea, #764ba2);
    border: none;
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 18px;
    transition: all 0.3s ease;
}

#addBtn:hover {
    transform: scale(1.1);
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
}

.filters {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    justify-content: center;
}

.filter-btn {
    padding: 8px 16px;
    border: 2px solid #e1e5e9;
    background: white;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
}

.filter-btn.active,
.filter-btn:hover {
    background: #667eea;
    color: white;
    border-color: #667eea;
}

.todo-item {
    display: flex;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #f0f0f0;
    transition: all 0.3s ease;
    animation: slideIn 0.3s ease-out;
}

.todo-item:hover {
    background: #f8f9fa;
}

.todo-item.completed {
    opacity: 0.6;
}

.todo-item.completed .todo-text {
    text-decoration: line-through;
}

.todo-checkbox {
    width: 20px;
    height: 20px;
    margin-right: 15px;
    cursor: pointer;
    accent-color: #667eea;
}

.todo-text {
    flex: 1;
    font-size: 16px;
    line-height: 1.4;
}

.todo-actions {
    display: flex;
    gap: 5px;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.todo-item:hover .todo-actions {
    opacity: 1;
}

.todo-btn {
    background: none;
    border: none;
    padding: 8px;
    cursor: pointer;
    border-radius: 4px;
    transition: all 0.3s ease;
}

.todo-btn:hover {
    background: #f0f0f0;
}

.todo-btn.edit:hover {
    color: #667eea;
}

.todo-btn.delete:hover {
    color: #e74c3c;
}

.todo-stats {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #f0f0f0;
    color: #666;
}

#clearCompleted {
    background: #e74c3c;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 20px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.3s ease;
}

#clearCompleted:hover {
    background: #c0392b;
    transform: translateY(-1px);
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateX(-20px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

.empty-state {
    text-align: center;
    padding: 40px 20px;
    color: #666;
}

.empty-state i {
    font-size: 3rem;
    margin-bottom: 20px;
    opacity: 0.5;
}

@media (max-width: 600px) {
    .container {
        padding: 10px;
    }
    
    .todo-container {
        padding: 20px;
    }
    
    .header h1 {
        font-size: 2rem;
    }
    
    .filters {
        flex-wrap: wrap;
    }
}'''
        
        (public_dir / "style.css").write_text(style_css)
        
        # Create script.js
        script_js = '''class TodoApp {
    constructor() {
        this.todos = [];
        this.currentFilter = 'all';
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.loadTodos();
    }
    
    bindEvents() {
        document.getElementById('addBtn').addEventListener('click', () => this.addTodo());
        document.getElementById('todoInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.addTodo();
        });
        
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.setFilter(e.target.dataset.filter));
        });
        
        document.getElementById('clearCompleted').addEventListener('click', () => this.clearCompleted());
    }
    
    async loadTodos() {
        try {
            const response = await fetch('/api/todos');
            this.todos = await response.json();
            this.renderTodos();
        } catch (error) {
            console.error('Error loading todos:', error);
        }
    }
    
    async addTodo() {
        const input = document.getElementById('todoInput');
        const text = input.value.trim();
        
        if (!text) return;
        
        try {
            const response = await fetch('/api/todos', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text })
            });
            
            if (response.ok) {
                const newTodo = await response.json();
                this.todos.push(newTodo);
                this.renderTodos();
                input.value = '';
            }
        } catch (error) {
            console.error('Error adding todo:', error);
        }
    }
    
    async toggleTodo(id) {
        const todo = this.todos.find(t => t.id === id);
        if (!todo) return;
        
        try {
            const response = await fetch(`/api/todos/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ completed: !todo.completed })
            });
            
            if (response.ok) {
                todo.completed = !todo.completed;
                this.renderTodos();
            }
        } catch (error) {
            console.error('Error toggling todo:', error);
        }
    }
    
    async deleteTodo(id) {
        if (!confirm('Are you sure you want to delete this task?')) return;
        
        try {
            const response = await fetch(`/api/todos/${id}`, { method: 'DELETE' });
            
            if (response.ok) {
                this.todos = this.todos.filter(t => t.id !== id);
                this.renderTodos();
            }
        } catch (error) {
            console.error('Error deleting todo:', error);
        }
    }
    
    setFilter(filter) {
        this.currentFilter = filter;
        
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.filter === filter);
        });
        
        this.renderTodos();
    }
    
    getFilteredTodos() {
        switch (this.currentFilter) {
            case 'active':
                return this.todos.filter(todo => !todo.completed);
            case 'completed':
                return this.todos.filter(todo => todo.completed);
            default:
                return this.todos;
        }
    }
    
    renderTodos() {
        const todoList = document.getElementById('todoList');
        const filteredTodos = this.getFilteredTodos();
        
        if (filteredTodos.length === 0) {
            todoList.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-clipboard-list"></i>
                    <p>No tasks found</p>
                </div>
            `;
        } else {
            todoList.innerHTML = filteredTodos.map(todo => `
                <div class="todo-item ${todo.completed ? 'completed' : ''}">
                    <input type="checkbox" class="todo-checkbox" ${todo.completed ? 'checked' : ''} 
                           onchange="todoApp.toggleTodo('${todo.id}')">
                    <span class="todo-text">${this.escapeHtml(todo.text)}</span>
                    <div class="todo-actions">
                        <button class="todo-btn delete" onclick="todoApp.deleteTodo('${todo.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }
        
        this.updateStats();
    }
    
    updateStats() {
        const totalTodos = this.todos.length;
        const completedTodos = this.todos.filter(t => t.completed).length;
        
        document.getElementById('todoCount').textContent = `${totalTodos} task${totalTodos !== 1 ? 's' : ''}`;
        
        const clearBtn = document.getElementById('clearCompleted');
        clearBtn.style.display = completedTodos > 0 ? 'block' : 'none';
    }
    
    async clearCompleted() {
        const completedTodos = this.todos.filter(t => t.completed);
        
        for (const todo of completedTodos) {
            try {
                await fetch(`/api/todos/${todo.id}`, { method: 'DELETE' });
            } catch (error) {
                console.error('Error deleting todo:', error);
            }
        }
        
        this.todos = this.todos.filter(t => !t.completed);
        this.renderTodos();
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// Initialize the app
const todoApp = new TodoApp();'''
        
        (public_dir / "script.js").write_text(script_js)
        
        # Create README.md
        readme = f'''# {project_name}

A beautiful, AI-generated Todo application built with modern web technologies.

## Features

- ✅ Add, edit, and delete tasks
- 🔄 Mark tasks as complete/incomplete
- 🔍 Filter tasks (All, Active, Completed)
- 📱 Responsive design for mobile and desktop
- 🎨 Beautiful, modern UI with smooth animations
- ⚡ Real-time updates
- 🗑️ Clear completed tasks

## Getting Started

1. Install dependencies:
   ```bash
   npm install
   ```

2. Start the development server:
   ```bash
   npm run dev
   ```

3. Open your browser and visit `http://localhost:3000`

## Production Deployment

1. Build the application:
   ```bash
   npm run build
   ```

2. Start the production server:
   ```bash
   npm start
   ```

## API Endpoints

- `GET /api/todos` - Get all todos
- `POST /api/todos` - Create a new todo
- `PUT /api/todos/:id` - Update a todo
- `DELETE /api/todos/:id` - Delete a todo

## Technologies Used

- Node.js & Express.js
- Vanilla JavaScript (ES6+)
- CSS3 with Flexbox
- Font Awesome icons
- Responsive design

## Generated by AI Development Studio

This application was automatically generated by the AI Development Studio multi-agent system.

## License

MIT License - feel free to use this code for your own projects!'''
        
        (project_path / "README.md").write_text(readme)
        
        return {
            "status": "success",
            "message": "Todo application created successfully",
            "files_created": [
                "package.json",
                "server.js", 
                "public/index.html",
                "public/style.css",
                "public/script.js",
                "README.md"
            ]
        }
    
    async def _create_blog_app(self, project_path: Path, project_name: str, tech_stack: str) -> Dict[str, Any]:
        """Create a blog application."""
        # Implementation for blog app
        return {"status": "success", "message": "Blog app created"}
    
    async def _create_ecommerce_app(self, project_path: Path, project_name: str, tech_stack: str) -> Dict[str, Any]:
        """Create an e-commerce application."""
        # Implementation for e-commerce app
        return {"status": "success", "message": "E-commerce app created"}
    
    async def _create_generic_app(self, project_path: Path, project_name: str, tech_stack: str, command: str) -> Dict[str, Any]:
        """Create a generic application based on the command."""
        # Implementation for generic app
        return {"status": "success", "message": "Generic app created"}
